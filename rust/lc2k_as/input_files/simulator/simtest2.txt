        lw   0 3 fourt     // reg3 = 14
        lw   0 6 neg       // reg6 = -3
        lw   0 7 endadd   // reg7 = address of end
        lw   0 5 arradd   // reg5 = address of arr
inf     nor  3 6 2         // reg2 = ~(reg3 | reg6)
        add  3 6 1
        sw   5 2 1
br      beq  1 2 end
        jalr 7 4 
        noop
end     halt
endadd .fill end
fourt   .fill 14
neg     .fill -3
arradd .fill arr
arr     .fill 4
        .fill 1
        .fill 100
